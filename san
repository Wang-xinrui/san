#define _CRT_SECURE_NO_WARNINGS//防止编译无法通过
#include <stdio.h>
#include <stdlib.h>

#define VertexMax 100 //最大顶点数为100
#define MaxInt 32767 //表示最大整数，表示 ∞ 

typedef char VertexType; //每个顶点数据类型为字符型 

typedef struct//邻接矩阵结构体 
{
	VertexType Vertex[VertexMax];//存放顶点元素的一维数组 
	int AdjMatrix[VertexMax][VertexMax];//邻接矩阵二维数组 
	int vexnum, arcnum;//图的顶点数和边数 
}MGraph;

typedef struct//辅助数组结构体(候选最短边) 
{
	VertexType adjvex;//候选最短边的邻接点 
	int lowcost;//候选最短边的权值 
}ShortEdge;

int Find(MGraph G, char start) {//查找是否包含起始城市  
	int flag = 0;
	for (int i = 0; i < G.vexnum; i++) {
		if (start == G.Vertex[i]) {
			flag = 1;
		}
	}
	if (flag == 0) {
		printf("\n-------------------------------\n");
		printf("很遗憾，没有找到此城市(@ ^ @)\n");
		return 0;
	}
	return 1;
}

int Renew(MGraph G) {//提供新的选择
	int a;
	printf("输入0退出操作页面，输入1则将继续进行操作：");
	scanf("%d", &a);
	if (a == 0) {
		printf("\n已退出操作，很高兴问您服务，欢迎下次使用(*^▽^*)\n");
		return 0;
	}
	else return 1;
}

int LocateVex(MGraph* G, VertexType v)//查找元素v在一维数组 Vertex[] 中的下标，并返回下标 
{
	int i;
	for (i = 0; i < G->vexnum; i++) {
		if (v == G->Vertex[i]) {
			return i;
		}
	}
	//printf("没有此地点(No Such Vertex!)\n");
	return -1;
}

int CreateUDN(MGraph* G)//构建无向网（Undirected Network）
{
	int i, j;
	//1.输入顶点数和边数
	printf("欢迎使用通讯信息系统(*^▽^*)我是您的助手小白\n请根据所提供的信息，对应填写城市的编号：北京 1 上海 2 天津 3 洛阳 4 沈阳 5 郑州 6 铁岭 7 大连 8 黑龙江9 重庆 10\n");
	printf("输入所需要建立通讯线路的城市的个数和通讯网络的线路数：\n");
	printf("城市个数 n=");
	scanf("%d", &G->vexnum);
	printf("通讯网络条数 e=");
	scanf("%d", &G->arcnum);
	//printf("\n");
	//printf("\n");
	//2.输入顶点元素 
	/*printf("输入城市编号(无需空格隔开)：");
	scanf("%s", G->Vertex);*/
	printf("输入城市编号(用空格隔开)：");
	char c;
	scanf("%c", &c);
	for (i = 0; i < G->vexnum; i++) {
		scanf("%c", &G->Vertex[i]);
		scanf("%c", &c);
	}
	printf("\n");
	//3.矩阵初始化
	for (i = 0; i < G->vexnum; i++) {
		for (j = 0; j < G->vexnum; j++) {
			G->AdjMatrix[i][j] = MaxInt;
		}
	}
	//4.构建邻接矩阵
	int n, m;
	VertexType v1, v2;
	int w;//v1->v2的权值 
	printf("请输入两个城市的信息和通讯线路的代价(例：A B 15(万))：\n");
	for (i = 0; i < G->arcnum; i++) {
		printf("请输入第%d条通讯线路信息及构造所需代价值(万)：", i + 1);
		scanf(" %c %c %d", &v1, &v2, &w);
		n = LocateVex(G, v1); //获取v1所对应的在Vertex数组中的坐标 
		m = LocateVex(G, v2); //获取v2所对应的在Vertex数组中的坐标
		if (n == -1 || m == -1) {
			printf("\n-------------------------------");
			printf("\n很遗憾,无法在%d个城市中创建最优线路(即无法创建最小生成树)!(@ ^ @)请对输入的数据进行仔细检查\n", G->vexnum);
			return 0;
		}
		if (w <= 0) {
			printf("\n-------------------------------");
			printf("\n请对输入的数据进行仔细检查(@ ^ @)\n");
			return 0;
		}
		G->AdjMatrix[n][m] = w;
		G->AdjMatrix[m][n] = w;//邻接矩阵对称
	}
	if (G->arcnum < G->vexnum - 1) {
		printf("\n-------------------------------\n");
		printf("很遗憾，无法构造通讯网(@ ^ @)请检查数据\n");
		return 0;
	}
	return 1;
}

void print(MGraph G) {
	int i, j;
	printf("\n-------------------------------");
	printf(" \n由此建立的邻接矩阵：\n\n");
	printf("\t ");
	for (i = 0; i < G.vexnum; i++) {
		printf("\t%c", G.Vertex[i]);
	}
	printf("\n");
	for (i = 0; i < G.vexnum; i++) {
		printf("\t%c", G.Vertex[i]);
		for (j = 0; j < G.vexnum; j++) {
			if (G.AdjMatrix[i][j] == MaxInt)
				printf("\t∞");
			else printf("\t%d", G.AdjMatrix[i][j]);
		}
		printf("\n");
	}
}

int minimal(MGraph* G, ShortEdge* shortedge) {//找最短路径的顶点 
	int i, j;
	int min = MaxInt;
	int loc = 0;
	for (i = 1; i < G->vexnum; i++) {
		if (min > shortedge[i].lowcost && shortedge[i].lowcost != 0) {
			min = shortedge[i].lowcost;
			loc = i;
		}
	}
	return loc;
}

static int sum;
void  MiniSpanTree_Prim(MGraph* G, VertexType start) {//构建PRIM算法
	int i, j, k;
	ShortEdge shortedge[VertexMax];
	//1.处理起始点start 
	k = LocateVex(G, start);
	if (k == -1) {
		printf("(* ^ *)没有找到此地点(No Such Vertex!)\n");
		return;
	}
	for (i = 0; i < G->vexnum; i++) {
		shortedge[i].adjvex = start;
		shortedge[i].lowcost = G->AdjMatrix[k][i];
	}
	shortedge[k].lowcost = 0;//lowcost为0表示该顶点属于U集合 
	//2.处理后续结点 
	printf("\n-------------------------------");
	printf("\n最小的通讯线路构造方式为:\n");
	for (i = 0; i < G->vexnum - 1; i++)//对集合U，去找最短路径的顶点 
	{
		k = minimal(G, shortedge);//找最短路径的顶点 
		printf("从%c城市->%c城市,代价为%d(万)\n", shortedge[k].adjvex, G->Vertex[k], shortedge[k].lowcost);//输出找到的最短路径顶，及路径权值 
		sum += shortedge[k].lowcost;
		shortedge[k].lowcost = 0;//将找到的最短路径顶点加入集合U中 
		for (j = 0; j < G->vexnum; j++)//U中加入了新节点，可能出现新的最短路径，故更新shortedge数组 
		{
			if (G->AdjMatrix[k][j] < shortedge[j].lowcost)//有更短路径出现时，将其替换进shortedge数组 
			{
				shortedge[j].lowcost = G->AdjMatrix[k][j];
				shortedge[j].adjvex = G->Vertex[k];
			}
		}

	}
	printf("\n构建通讯网络总共最小的代价为：----%d(万)", sum);
	printf("\n已退出操作，很高兴问您服务，欢迎下次使用(*^▽^*)\n");
}

int main() {
	VertexType start;
	MGraph G;
	if (!CreateUDN(&G)) {
		if (!Renew(G)) {
			return 0;
		}
		printf("\n-------------------------------\n");
		CreateUDN(&G);
	}
	//print(G);
	printf("\n请输入所要构造最优线路的起始城市：");
	scanf("\n%c", &start);//%c前面有换行符 
	if (start == '*') {
		printf("已为您提前结束操作，欢迎下次使用(*^▽^*)\n");
		return 0;
	}
	if (!Find(G, start)) {
		if (!Renew(G))
			return 0;
		else {
			printf("请重新输入起始城市的编号：");
			scanf_s("\n%c", &start);
		}
	}
	MiniSpanTree_Prim(&G, start);
	//print(G);
	return 0;
}
/*
样例一：
6 10(正常样例)
1 2 3 4 5 6
1 3 1
1 4 5
1 2 6
2 3 5
3 4 5
2 5 3
5 3 6
3 6 4
5 6 6
4 6 2
样例二：
6 9(正常样例)
0 1 2 3 4 5
1 4 12
3 4 38
0 2 46
2 3 17
0 5 19
4 5 26
0 1 34
2 5 25
3 5 25
样例三：
7 3(无法构造最小生成树)
0 1 2 3 4 5 6
2 4 15
1 3 6
0 6 2
样例四：
5 8(正常样例)
9 8 7 6 5
7 8 7
6 8 6
6 7 8
5 8 9
5 7 4
5 6 6
9 7 4
9 5 2
样例五：
5 7
1 5 6 8 9
1 5 6
8 9 1
6 1 5
9 5 3
5 6 3
5 8 2
8 6 7
*/
